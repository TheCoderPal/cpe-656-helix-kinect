//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// Example of how to use this.
//
//Microsoft.Win32.OpenFileDialog dlg = new Microsoft.Win32.OpenFileDialog();
//            dlg.ShowDialog();
//            if (System.IO.File.Exists(dlg.FileName))
//            {
//                System.IO.FileStream file = new System.IO.FileStream(dlg.FileName, System.IO.FileMode.Open);
//                System.IO.StreamReader stream = new System.IO.StreamReader(file);
//                Gesture gesture = Gesture.Load(stream);
//            }

namespace tempuri.org.GestureDefinition.xsd {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (FudgeFactor, Segment+)
    /// </para>
    /// </summary>
    public partial class Gesture : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SegmentLocalType> SegmentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Gesture(XElement xe) { return XTypedServices.ToXTypedElement<Gesture>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Gesture() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("FudgeFactor", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("Segment", "http://tempuri.org/GestureDefinition.xsd")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FudgeFactor, Segment+)
        /// </para>
        /// </summary>
        public Gesture() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FudgeFactor, Segment+)
        /// </para>
        /// </summary>
        public double FudgeFactor {
            get {
                XElement x = this.GetElement(XName.Get("FudgeFactor", "http://tempuri.org/GestureDefinition.xsd"));
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(XName.Get("FudgeFactor", "http://tempuri.org/GestureDefinition.xsd"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FudgeFactor, Segment+)
        /// </para>
        /// </summary>
        public IList<tempuri.org.GestureDefinition.xsd.Gesture.SegmentLocalType> Segment {
            get {
                if ((this.SegmentField == null)) {
                    this.SegmentField = new XTypedList<SegmentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Segment", "http://tempuri.org/GestureDefinition.xsd"));
                }
                return this.SegmentField;
            }
            set {
                if ((value == null)) {
                    this.SegmentField = null;
                }
                else {
                    if ((this.SegmentField == null)) {
                        this.SegmentField = XTypedList<SegmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Segment", "http://tempuri.org/GestureDefinition.xsd"));
                    }
                    else {
                        XTypedServices.SetList<SegmentLocalType>(this.SegmentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Gesture", "http://tempuri.org/GestureDefinition.xsd");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Gesture Load(string xmlFile) {
            return XTypedServices.Load<Gesture>(xmlFile);
        }
        
        public static Gesture Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Gesture>(xmlFile);
        }
        
        public static Gesture Parse(string xml) {
            return XTypedServices.Parse<Gesture>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Gesture>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FudgeFactor", "http://tempuri.org/GestureDefinition.xsd"), typeof(double));
            localElementDictionary.Add(XName.Get("Segment", "http://tempuri.org/GestureDefinition.xsd"), typeof(SegmentLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
        /// </para>
        /// </summary>
        public partial class SegmentLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator SegmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SegmentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SegmentLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("HipCenter", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("Spine", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("ShoulderCenter", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("Head", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("ShoulderLeft", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("ElbowLeft", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("WristLeft", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("HandLeft", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("ShoulderRight", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("ElbowRight", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("WristRight", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("HandRight", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("HipLeft", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("KneeLeft", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("AnkleLeft", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("FootLeft", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("HipRight", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("KneeRight", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("AnkleRight", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("FootRight", "http://tempuri.org/GestureDefinition.xsd")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public SegmentLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public BodyPart HipCenter {
                get {
                    XElement x = this.GetElement(XName.Get("HipCenter", "http://tempuri.org/GestureDefinition.xsd"));
                    return ((BodyPart)(x));
                }
                set {
                    this.SetElement(XName.Get("HipCenter", "http://tempuri.org/GestureDefinition.xsd"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public BodyPart Spine {
                get {
                    XElement x = this.GetElement(XName.Get("Spine", "http://tempuri.org/GestureDefinition.xsd"));
                    return ((BodyPart)(x));
                }
                set {
                    this.SetElement(XName.Get("Spine", "http://tempuri.org/GestureDefinition.xsd"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public BodyPart ShoulderCenter {
                get {
                    XElement x = this.GetElement(XName.Get("ShoulderCenter", "http://tempuri.org/GestureDefinition.xsd"));
                    return ((BodyPart)(x));
                }
                set {
                    this.SetElement(XName.Get("ShoulderCenter", "http://tempuri.org/GestureDefinition.xsd"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public BodyPart Head {
                get {
                    XElement x = this.GetElement(XName.Get("Head", "http://tempuri.org/GestureDefinition.xsd"));
                    return ((BodyPart)(x));
                }
                set {
                    this.SetElement(XName.Get("Head", "http://tempuri.org/GestureDefinition.xsd"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public BodyPart ShoulderLeft {
                get {
                    XElement x = this.GetElement(XName.Get("ShoulderLeft", "http://tempuri.org/GestureDefinition.xsd"));
                    return ((BodyPart)(x));
                }
                set {
                    this.SetElement(XName.Get("ShoulderLeft", "http://tempuri.org/GestureDefinition.xsd"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public BodyPart ElbowLeft {
                get {
                    XElement x = this.GetElement(XName.Get("ElbowLeft", "http://tempuri.org/GestureDefinition.xsd"));
                    return ((BodyPart)(x));
                }
                set {
                    this.SetElement(XName.Get("ElbowLeft", "http://tempuri.org/GestureDefinition.xsd"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public BodyPart WristLeft {
                get {
                    XElement x = this.GetElement(XName.Get("WristLeft", "http://tempuri.org/GestureDefinition.xsd"));
                    return ((BodyPart)(x));
                }
                set {
                    this.SetElement(XName.Get("WristLeft", "http://tempuri.org/GestureDefinition.xsd"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public BodyPart HandLeft {
                get {
                    XElement x = this.GetElement(XName.Get("HandLeft", "http://tempuri.org/GestureDefinition.xsd"));
                    return ((BodyPart)(x));
                }
                set {
                    this.SetElement(XName.Get("HandLeft", "http://tempuri.org/GestureDefinition.xsd"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public BodyPart ShoulderRight {
                get {
                    XElement x = this.GetElement(XName.Get("ShoulderRight", "http://tempuri.org/GestureDefinition.xsd"));
                    return ((BodyPart)(x));
                }
                set {
                    this.SetElement(XName.Get("ShoulderRight", "http://tempuri.org/GestureDefinition.xsd"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public BodyPart ElbowRight {
                get {
                    XElement x = this.GetElement(XName.Get("ElbowRight", "http://tempuri.org/GestureDefinition.xsd"));
                    return ((BodyPart)(x));
                }
                set {
                    this.SetElement(XName.Get("ElbowRight", "http://tempuri.org/GestureDefinition.xsd"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public BodyPart WristRight {
                get {
                    XElement x = this.GetElement(XName.Get("WristRight", "http://tempuri.org/GestureDefinition.xsd"));
                    return ((BodyPart)(x));
                }
                set {
                    this.SetElement(XName.Get("WristRight", "http://tempuri.org/GestureDefinition.xsd"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public BodyPart HandRight {
                get {
                    XElement x = this.GetElement(XName.Get("HandRight", "http://tempuri.org/GestureDefinition.xsd"));
                    return ((BodyPart)(x));
                }
                set {
                    this.SetElement(XName.Get("HandRight", "http://tempuri.org/GestureDefinition.xsd"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public BodyPart HipLeft {
                get {
                    XElement x = this.GetElement(XName.Get("HipLeft", "http://tempuri.org/GestureDefinition.xsd"));
                    return ((BodyPart)(x));
                }
                set {
                    this.SetElement(XName.Get("HipLeft", "http://tempuri.org/GestureDefinition.xsd"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public BodyPart KneeLeft {
                get {
                    XElement x = this.GetElement(XName.Get("KneeLeft", "http://tempuri.org/GestureDefinition.xsd"));
                    return ((BodyPart)(x));
                }
                set {
                    this.SetElement(XName.Get("KneeLeft", "http://tempuri.org/GestureDefinition.xsd"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public BodyPart AnkleLeft {
                get {
                    XElement x = this.GetElement(XName.Get("AnkleLeft", "http://tempuri.org/GestureDefinition.xsd"));
                    return ((BodyPart)(x));
                }
                set {
                    this.SetElement(XName.Get("AnkleLeft", "http://tempuri.org/GestureDefinition.xsd"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public BodyPart FootLeft {
                get {
                    XElement x = this.GetElement(XName.Get("FootLeft", "http://tempuri.org/GestureDefinition.xsd"));
                    return ((BodyPart)(x));
                }
                set {
                    this.SetElement(XName.Get("FootLeft", "http://tempuri.org/GestureDefinition.xsd"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public BodyPart HipRight {
                get {
                    XElement x = this.GetElement(XName.Get("HipRight", "http://tempuri.org/GestureDefinition.xsd"));
                    return ((BodyPart)(x));
                }
                set {
                    this.SetElement(XName.Get("HipRight", "http://tempuri.org/GestureDefinition.xsd"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public BodyPart KneeRight {
                get {
                    XElement x = this.GetElement(XName.Get("KneeRight", "http://tempuri.org/GestureDefinition.xsd"));
                    return ((BodyPart)(x));
                }
                set {
                    this.SetElement(XName.Get("KneeRight", "http://tempuri.org/GestureDefinition.xsd"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public BodyPart AnkleRight {
                get {
                    XElement x = this.GetElement(XName.Get("AnkleRight", "http://tempuri.org/GestureDefinition.xsd"));
                    return ((BodyPart)(x));
                }
                set {
                    this.SetElement(XName.Get("AnkleRight", "http://tempuri.org/GestureDefinition.xsd"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight)
            /// </para>
            /// </summary>
            public BodyPart FootRight {
                get {
                    XElement x = this.GetElement(XName.Get("FootRight", "http://tempuri.org/GestureDefinition.xsd"));
                    return ((BodyPart)(x));
                }
                set {
                    this.SetElement(XName.Get("FootRight", "http://tempuri.org/GestureDefinition.xsd"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Segment", "http://tempuri.org/GestureDefinition.xsd");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SegmentLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("HipCenter", "http://tempuri.org/GestureDefinition.xsd"), typeof(BodyPart));
                localElementDictionary.Add(XName.Get("Spine", "http://tempuri.org/GestureDefinition.xsd"), typeof(BodyPart));
                localElementDictionary.Add(XName.Get("ShoulderCenter", "http://tempuri.org/GestureDefinition.xsd"), typeof(BodyPart));
                localElementDictionary.Add(XName.Get("Head", "http://tempuri.org/GestureDefinition.xsd"), typeof(BodyPart));
                localElementDictionary.Add(XName.Get("ShoulderLeft", "http://tempuri.org/GestureDefinition.xsd"), typeof(BodyPart));
                localElementDictionary.Add(XName.Get("ElbowLeft", "http://tempuri.org/GestureDefinition.xsd"), typeof(BodyPart));
                localElementDictionary.Add(XName.Get("WristLeft", "http://tempuri.org/GestureDefinition.xsd"), typeof(BodyPart));
                localElementDictionary.Add(XName.Get("HandLeft", "http://tempuri.org/GestureDefinition.xsd"), typeof(BodyPart));
                localElementDictionary.Add(XName.Get("ShoulderRight", "http://tempuri.org/GestureDefinition.xsd"), typeof(BodyPart));
                localElementDictionary.Add(XName.Get("ElbowRight", "http://tempuri.org/GestureDefinition.xsd"), typeof(BodyPart));
                localElementDictionary.Add(XName.Get("WristRight", "http://tempuri.org/GestureDefinition.xsd"), typeof(BodyPart));
                localElementDictionary.Add(XName.Get("HandRight", "http://tempuri.org/GestureDefinition.xsd"), typeof(BodyPart));
                localElementDictionary.Add(XName.Get("HipLeft", "http://tempuri.org/GestureDefinition.xsd"), typeof(BodyPart));
                localElementDictionary.Add(XName.Get("KneeLeft", "http://tempuri.org/GestureDefinition.xsd"), typeof(BodyPart));
                localElementDictionary.Add(XName.Get("AnkleLeft", "http://tempuri.org/GestureDefinition.xsd"), typeof(BodyPart));
                localElementDictionary.Add(XName.Get("FootLeft", "http://tempuri.org/GestureDefinition.xsd"), typeof(BodyPart));
                localElementDictionary.Add(XName.Get("HipRight", "http://tempuri.org/GestureDefinition.xsd"), typeof(BodyPart));
                localElementDictionary.Add(XName.Get("KneeRight", "http://tempuri.org/GestureDefinition.xsd"), typeof(BodyPart));
                localElementDictionary.Add(XName.Get("AnkleRight", "http://tempuri.org/GestureDefinition.xsd"), typeof(BodyPart));
                localElementDictionary.Add(XName.Get("FootRight", "http://tempuri.org/GestureDefinition.xsd"), typeof(BodyPart));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Tracking, Position)
    /// </para>
    /// </summary>
    public partial class BodyPart : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator BodyPart(XElement xe) { return XTypedServices.ToXTypedElement<BodyPart>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BodyPart() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Tracking", "http://tempuri.org/GestureDefinition.xsd")), new NamedContentModelEntity(XName.Get("Position", "http://tempuri.org/GestureDefinition.xsd")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Tracking, Position)
        /// </para>
        /// </summary>
        public BodyPart() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Tracking, Position)
        /// </para>
        /// </summary>
        public bool Tracking {
            get {
                XElement x = this.GetElement(XName.Get("Tracking", "http://tempuri.org/GestureDefinition.xsd"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("Tracking", "http://tempuri.org/GestureDefinition.xsd"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Tracking, Position)
        /// </para>
        /// </summary>
        public PositionLocalType Position {
            get {
                XElement x = this.GetElement(XName.Get("Position", "http://tempuri.org/GestureDefinition.xsd"));
                return ((PositionLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Position", "http://tempuri.org/GestureDefinition.xsd"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("BodyPart", "http://tempuri.org/GestureDefinition.xsd");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BodyPart>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Tracking", "http://tempuri.org/GestureDefinition.xsd"), typeof(bool));
            localElementDictionary.Add(XName.Get("Position", "http://tempuri.org/GestureDefinition.xsd"), typeof(PositionLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class PositionLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static double XDefaultValue = System.Xml.XmlConvert.ToDouble("0.0");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static double YDefaultValue = System.Xml.XmlConvert.ToDouble("0.0");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static double ZDefaultValue = System.Xml.XmlConvert.ToDouble("0.0");
            
         public static explicit operator PositionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PositionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public PositionLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public double X {
                get {
                    XAttribute x = this.Attribute(XName.Get("X", ""));
                    return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, XDefaultValue);
                }
                set {
                    this.SetAttribute(XName.Get("X", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public double Y {
                get {
                    XAttribute x = this.Attribute(XName.Get("Y", ""));
                    return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, YDefaultValue);
                }
                set {
                    this.SetAttribute(XName.Get("Y", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public double Z {
                get {
                    XAttribute x = this.Attribute(XName.Get("Z", ""));
                    return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, ZDefaultValue);
                }
                set {
                    this.SetAttribute(XName.Get("Z", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Position", "http://tempuri.org/GestureDefinition.xsd");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PositionLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(XName.Get("BodyPart", "http://tempuri.org/GestureDefinition.xsd"), typeof(global::tempuri.org.GestureDefinition.xsd.BodyPart));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(XName.Get("Gesture", "http://tempuri.org/GestureDefinition.xsd"), typeof(global::tempuri.org.GestureDefinition.xsd.Gesture));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[XName.Get("Gesture", "http://tempuri.org/GestureDefinition.xsd")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public Gesture Gesture {  get {return rootObject as Gesture; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(Gesture root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public global::tempuri.org.GestureDefinition.xsd.Gesture Gesture {  get {return rootObject as global::tempuri.org.GestureDefinition.xsd.Gesture; } }
        
        private XRoot() {
        }
        
        public XRoot(global::tempuri.org.GestureDefinition.xsd.Gesture root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
